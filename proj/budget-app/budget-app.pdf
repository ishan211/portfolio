HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budget Tracker</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <h1>Budget Tracker</h1>

        <div id="login-section">
            <input type="text" id="username" placeholder="Enter your username">
            <button onclick="login()">Login</button>
        </div>

        <div id="app-section" style="display:none;">
            <div class="summary">
                <h3>Total Income: $<span id="total-income">0</span></h3>
                <h3>Total Expenses: $<span id="total-expenses">0</span></h3>
                <h3>Balance: $<span id="balance">0</span></h3>
                <button onclick="logout()">Logout</button>
            </div>

            <div class="input-section">
                <input type="text" id="description" placeholder="Description">
                <input type="number" id="amount" placeholder="Amount">
                <input type="date" id="date">
                <select id="category">
                    <option value="income">Income</option>
                    <option value="food">Food</option>
                    <option value="entertainment">Entertainment</option>
                    <option value="bills">Bills</option>
                    <option value="others">Others</option>
                </select>
                <button onclick="addTransaction()">Add</button>
            </div>

            <div class="filter-section">
                <h2>Filter Transactions</h2>
                <input type="date" id="filter-start-date">
                <input type="date" id="filter-end-date">
                <select id="filter-category">
                    <option value="all">All Categories</option>
                    <option value="income">Income</option>
                    <option value="food">Food</option>
                    <option value="entertainment">Entertainment</option>
                    <option value="bills">Bills</option>
                    <option value="others">Others</option>
                </select>
                <button onclick="filterTransactions()">Filter</button>
            </div>
            
            <div class="transactions">
                <h2>Transactions</h2>
                <ul id="transaction-list"></ul>
            </div>

            <div class="charts">
                <h2>Summary Dashboard</h2>
                <canvas id="incomeExpenseChart"></canvas>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

JS:
let totalIncome = 0;
let totalExpenses = 0;
let transactions = [];
let currentUser = null;
let incomeExpenseChart;

function login() {
    const username = document.getElementById('username').value.trim();
    if (username) {
        currentUser = username;
        loadUserData();
        document.getElementById('login-section').style.display = 'none';
        document.getElementById('app-section').style.display = 'block';
    } else {
        alert('Please enter a username.');
    }
}

function logout() {
    currentUser = null;
    transactions = [];
    totalIncome = 0;
    totalExpenses = 0;
    document.getElementById('transaction-list').innerHTML = '';
    updateSummary();
    updateChart();
    document.getElementById('login-section').style.display = 'block';
    document.getElementById('app-section').style.display = 'none';
}

function loadUserData() {
    const userData = JSON.parse(localStorage.getItem(`budget_${currentUser}`)) || [];
    transactions = userData;
    renderTransactions(transactions);
    updateSummary();
    updateChart();
}

function saveUserData() {
    localStorage.setItem(`budget_${currentUser}`, JSON.stringify(transactions));
}

function addTransaction() {
    const description = document.getElementById('description').value;
    const amount = parseFloat(document.getElementById('amount').value);
    const category = document.getElementById('category').value;
    const date = document.getElementById('date').value || new Date().toISOString().split('T')[0]; // Default to today's date if not provided

    if (description !== '' && !isNaN(amount)) {
        const transaction = {
            id: generateId(),
            description,
            amount,
            category,
            date
        };

        transactions.push(transaction);
        saveUserData();
        addTransactionToDOM(transaction);
        updateSummary();
        updateChart();

        // Clear the input fields after adding
        document.getElementById('description').value = '';
        document.getElementById('amount').value = '';
        document.getElementById('category').value = 'income';
        document.getElementById('date').value = '';
    } else {
        alert('Please enter a valid description, amount, and select a category.');
    }
}

function addTransactionToDOM(transaction) {
    const transactionList = document.getElementById('transaction-list');
    const listItem = document.createElement('li');
    listItem.setAttribute('data-id', transaction.id);

    if (transaction.category === 'income') {
        totalIncome += transaction.amount;
    } else {
        totalExpenses += Math.abs(transaction.amount);
    }

    listItem.innerHTML = `
        ${transaction.date} - ${transaction.description} - $${transaction.amount.toFixed(2)} <span class="category">[${transaction.category}]</span>
        <div class="transaction-actions">
            <button class="edit" onclick="editTransaction('${transaction.id}')">Edit</button>
            <button onclick="deleteTransaction('${transaction.id}')">Delete</button>
        </div>
    `;
    transactionList.appendChild(listItem);
}

function editTransaction(id) {
    const transaction = transactions.find(t => t.id === id);

    if (transaction) {
        document.getElementById('description').value = transaction.description;
        document.getElementById('amount').value = transaction.amount;
        document.getElementById('category').value = transaction.category;
        document.getElementById('date').value = transaction.date;

        deleteTransaction(id); // Remove the old transaction so the new one can be added with updated info
    }
}

function deleteTransaction(id) {
    transactions = transactions.filter(transaction => transaction.id !== id);
    saveUserData();
    renderTransactions(transactions);
    updateChart();
}

function updateSummary() {
    const balance = totalIncome - totalExpenses;

    document.getElementById('total-income').textContent = totalIncome.toFixed(2);
    document.getElementById('total-expenses').textContent = totalExpenses.toFixed(2);
    document.getElementById('balance').textContent = balance.toFixed(2);
}

function updateChart() {
    incomeExpenseChart.data.datasets[0].data = [totalIncome, totalExpenses];
    incomeExpenseChart.update();
}

function filterTransactions() {
    const startDate = document.getElementById('filter-start-date').value;
    const endDate = document.getElementById('filter-end-date').value;
    const filterCategory = document.getElementById('filter-category').value;

    const filteredTransactions = transactions.filter(transaction => {
        const transactionDate = new Date(transaction.date);
        const startMatch = startDate ? transactionDate >= new Date(startDate) : true;
        const endMatch = endDate ? transactionDate <= new Date(endDate) : true;
        const categoryMatch = filterCategory === 'all' || transaction.category === filterCategory;

        return startMatch && endMatch && categoryMatch;
    });

    renderTransactions(filteredTransactions);
}

function renderTransactions(filteredTransactions) {
    const transactionList = document.getElementById('transaction-list');
    transactionList.innerHTML = '';

    totalIncome = 0;
    totalExpenses = 0;

    filteredTransactions.forEach(addTransactionToDOM);
    updateSummary();
    updateChart();
}

function generateId() {
    return '_' + Math.random().toString(36).substr(2, 9);
}

function initChart() {
    const ctx = document.getElementById('incomeExpenseChart').getContext('2d');
    incomeExpenseChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Income', 'Expenses'],
            datasets: [{
                label: 'Income vs Expenses',
                data: [totalIncome, totalExpenses],
                backgroundColor: ['#28a745', '#dc3545'],
                borderColor: ['#28a745', '#dc3545'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
        }
    });
}

function init() {
    initChart();
}

init();

CSS:
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    margin-bottom: 20px;
}

#login-section {
    text-align: center;
    margin-bottom: 20px;
}

#login-section input {
    width: 70%;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 4px;
    border: 1px solid #ccc;
}

#login-section button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#login-section button:hover {
    background-color: #0056b3;
}

.summary {
    text-align: center;
    margin-bottom: 20px;
}

.summary h3 {
    margin: 10px 0;
}

.summary button {
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.summary button:hover {
    background-color: #c82333;
}

.input-section,
.filter-section {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.input-section input,
.input-section select,
.filter-section input,
.filter-section select {
    width: calc(50% - 10px);
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ccc;
    margin-bottom: 10px;
}

#date,
#filter-start-date,
#filter-end-date {
    width: calc(50% - 10px);
}

.input-section button,
.filter-section button {
    width: calc(50% - 10px);
    padding: 10px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: 10px;
}

.input-section button:hover,
.filter-section button:hover {
    background-color: #218838;
}

.transactions h2 {
    text-align: center;
    margin-bottom: 10px;
}

#transaction-list {
    list-style-type: none;
    padding: 0;
}

#transaction-list li {
    background-color: #f8f9fa;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    border: 1px solid #ccc;
    flex-wrap: wrap;
}

.transaction-actions {
    display: flex;
    gap: 10px;
}

.transaction-actions button {
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    padding: 5px;
}

.transaction-actions button.edit {
    background-color: #007bff;
}

.transaction-actions button:hover {
    opacity: 0.8;
}

.charts {
    margin-top: 40px;
}

@media (max-width: 768px) {
    .input-section input,
    .input-section select,
    .input-section button,
    .filter-section input,
    .filter-section select,
    .filter-section button {
        width: 100%;
    }

    #transaction-list li {
        flex-direction: column;
    }

    .transaction-actions {
        justify-content: flex-start;
    }
}
